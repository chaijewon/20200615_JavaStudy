/*
 *    클래스의 구성 요소 
 *    ==============
 *       멤버변수 
 *       생성자
 *       메소드 
 *    ==============
 *    객체지향의 3대요소
 *      = 데이터 보호 (데이터 사용하지 못하게 만드는 작업: 은닉화 
 *                  클래스와 클래스의 연결 => 감춘 데이터를 메소드를 통해서 접근이 가능:캡슐화)
 *        = 접근지정어 
 *          private 
 *          protected 
 *          public 
 *          default 
 *      = 재사용 기법 
 *        = 상속 ==> is-a
 *        = 포함 ==> has-a
 *        
 *      = 수정,추가 
 *        = 다형성 
 *          = 오버로딩 : 새로운 기능 추가 
 *          = 오버라이딩 : 기존에 있던 기능을 수정 
 *      ===============================================================
 *        유지보수가 용이가하게 만드는 기법 
 *        => 실행 속도가 늦다 (객체지향) 
 *        ========================== POJO (Spring)
 *        *** 
 *        
 *        
 *        1) 접근지정어 
 *        =============================================================
 *                      같은 클래스   같은 폴더       다른 폴더             모든 클래스
 *                                (패키지)  상속을 받는 경우
 *        =============================================================
 *         public          O         O         O             O
 *        =============================================================
 *         protected       O         O         O             X
 *        =============================================================
 *         default         O         O         X             X
 *        =============================================================
 *         private         O         X         X             X
 *        =============================================================
 *        
 *        접근 범위 크기
 *        public > protected > default > private 
 *        
 *        1) public : 공개 (전체) : 어떤 위치든 상관없이 사용이 가능
 *            예) public int age; 
 *        2) protected: 상속을 받는 경우에 하위클래스에서 사용이 가능 (사용 빈도가 작다)
 *            예) protected String name;
 *             상속에서 예외 조건 
 *             ==============
 *               1. static  => 사용이 가능하게 만든다 
 *               2. private => 상속이 된다 => 사용이 불가능 
 *               3. 생성자  => 상속이되지 않는다 
 *        3) default : 같은 패키지 안에서만 사용이 가능 => src
 *            예)  String name;
 *        사용방식 
 *          멤버변수  => 다른 클래스에서 값을 변경 할 수 없게 은닉화  => private 
 *          ========
 *          메소드 
 *          생성자 
 *          ======== 다른 클래스와 연결해서 프로그램이 동작  => public 
 *          
 *        4) private : 자신의 클래스에서만 사용이 가능 => 비공개 
 *                     => 다른 클래스에서도 사용이 가능 => 메소드를 통해서 접근이 가능하게 
 *                        만든다 
 *       ============================================================
 *       1. 데이터 보호 : 값이 프로그램과 관련없이 변질,값 변경될 수도 있다 
 *                     => 캡슐화 
 *                        =====
 *                        1) 데이터 보호하는 목적 
 *                           데이터를 은닉화 => 필요할때만 메소드를 이용해서 사용 
 *                        2) 경계구분 
 *                        
 *          class A
 *          {
 *             public void add(int a,int b){}
 *             public void add(double d,double d1){}
 *             public void add(String s,String s1){}
 *          }
 *          
 *          A a=new A();  ==> 
 *          
 *          class A
 *          {
 *              public void add(int a,int b){}
 *          }
 *          class B extends A
 *          {
 *              public void add(int a,int b){}
 *          }
 *          
 *          A a=new A()
 *          a.add()  ==> A클래스가 가지고 있는 add()메소드 호출 
 *        
 *          a=new B();
 *          a.add() ==> B클래스가 가지고 있는 add()메소드 호출
 */
public class 캡슐화 {
    public 캡슐화() {
    	
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
